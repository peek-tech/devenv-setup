#!/bin/bash

# Omamacy - macOS Developer Environment Setup
# Usage: curl -fsSL https://peek-tech.github.io/devenv-setup/install | bash
# Options:
#   --manifest <path>  Use custom manifest file
#   --update-mode      Skip preflight checks (for upgrade system)

# macOS only - exit immediately if not on macOS
if [[ "$OSTYPE" != "darwin"* ]]; then
    echo "‚ùå This installer is for macOS only. Detected: $OSTYPE"
    exit 1
fi

set -e

# Repository configuration
REPO_URL="https://github.com/peek-tech/devenv-setup.git"
INSTALL_DIR="$HOME/.local/share/omamacy"
CONFIG_DIR="$HOME/.config/omamacy"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
VERSION="2.0.0"

# Parse command-line arguments
CUSTOM_MANIFEST=""
UPDATE_MODE=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --manifest|-m)
            CUSTOM_MANIFEST="$2"
            shift 2
            ;;
        --update-mode)
            UPDATE_MODE=true
            shift
            ;;
        --help|-h)
            echo "Usage: $0 [options]"
            echo "Options:"
            echo "  --manifest <path>  Use custom manifest file"
            echo "  --update-mode      Skip preflight checks (for upgrade system)"
            exit 0
            ;;
        *)
            print_error "Unknown option: $1"
            exit 1
            ;;
    esac
done

print_header() {
    echo ""
    echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${CYAN}‚ïë                    Omamacy v${VERSION}                    ‚ïë${NC}"
    echo -e "${CYAN}‚ïë              macOS Developer Environment                 ‚ïë${NC}"
    echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
}

print_status() {
    echo -e "${GREEN}‚úÖ${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è${NC} $1"
}

print_error() {
    echo -e "${RED}‚ùå${NC} $1"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è${NC} $1"
}

print_section() {
    echo ""
    echo -e "${CYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${CYAN}$1${NC}"
    echo -e "${CYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
}

# Ensure Xcode Command Line Tools are installed
ensure_xcode_cli_tools() {
    if ! xcode-select -p &> /dev/null; then
        print_warning "Xcode Command Line Tools are required but not installed"
        echo ""
        print_info "IMPORTANT: A GRAPHICAL installer will open OUTSIDE this terminal window"
        print_info "üëâ Look for the Xcode installer popup and click 'Install'"
        echo ""
        
        # Temporarily disable exit on error for this command
        set +e
        xcode-select --install 2>/dev/null
        local install_result=$?
        set -e
        
        # The command may fail if tools are already installed or if dialog was cancelled
        if [ $install_result -eq 0 ] || [ $install_result -eq 1 ]; then
            echo ""
            print_warning "‚ö†Ô∏è  LOOK FOR THE POPUP WINDOW OUTSIDE THE TERMINAL ‚ö†Ô∏è"
            echo ""
            print_info "Waiting for Xcode Command Line Tools installation..."
            print_info "This script will wait and check every 30 seconds"
            print_info "Complete the installation in the popup window"
            echo ""
            
            # Wait for installation to complete (check every 30 seconds)
            while ! xcode-select -p &> /dev/null; do
                print_info "Still waiting for Xcode tools installation... (checking again in 30s)"
                sleep 30
            done
            
            print_status "Xcode Command Line Tools installation detected!"
        else
            print_warning "Xcode tools installer may not have started properly"
            print_info "If no popup appeared, please run manually: xcode-select --install"
            print_info "This script will continue checking..."
            
            # Still wait and check periodically
            while ! xcode-select -p &> /dev/null; do
                print_info "Waiting for Xcode tools... (will check again in 30s)"
                sleep 30
            done
        fi
    fi
    print_status "Xcode Command Line Tools available"
}

# Download repository if not already present
download_repository() {
    # Handle migration from old location
    OLD_INSTALL_DIR="$HOME/.omamacy"
    if [ -d "$OLD_INSTALL_DIR" ] && [ ! -d "$INSTALL_DIR" ]; then
        print_info "Migrating from old installation location..."
        mkdir -p "$(dirname "$INSTALL_DIR")"
        mv "$OLD_INSTALL_DIR" "$INSTALL_DIR"
        print_status "Migrated to new location: $INSTALL_DIR"
    fi

    if [ -d "$INSTALL_DIR" ]; then
        print_info "Repository already exists at $INSTALL_DIR"
        cd "$INSTALL_DIR"
        
        # Check if this is a git repository
        if [ -d ".git" ]; then
            print_info "Updating repository to latest version..."
            
            # Reset any local changes and pull latest
            git fetch origin main 2>/dev/null || {
                print_warning "Could not fetch latest changes"
            }
            
            git reset --hard origin/main 2>/dev/null || {
                print_warning "Could not update to latest version, using existing"
            }
            
            print_status "Repository updated to latest version"
        else
            print_warning "Existing directory is not a git repository, using as-is"
        fi
    else
        print_info "Downloading Omamacy repository..."
        mkdir -p "$(dirname "$INSTALL_DIR")"
        git clone "$REPO_URL" "$INSTALL_DIR" || {
            print_error "Failed to clone repository from $REPO_URL"
            exit 1
        }
        cd "$INSTALL_DIR"
        print_status "Repository downloaded successfully"
    fi
}

# Check if we're running from downloaded repository
check_repository_structure() {
    local current_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
    
    # If scripts directory doesn't exist here, we need to download
    if [ ! -d "$current_dir/scripts" ]; then
        return 1
    fi
    
    # If we're not in the install directory, we need to download
    if [ "$current_dir" != "$INSTALL_DIR" ]; then
        return 1
    fi
    
    return 0
}

# Install core system dependencies (homebrew and jq)
install_core_dependencies() {
    local script_dir="$1"
    
    print_section "Installing Core Dependencies"
    
    # Install Homebrew with retry logic
    local homebrew_attempts=0
    local max_homebrew_attempts=3
    
    while [ $homebrew_attempts -lt $max_homebrew_attempts ]; do
        homebrew_attempts=$((homebrew_attempts + 1))
        
        if bash "$script_dir/homebrew.sh"; then
            print_status "Homebrew installation completed"
            
            # Load Homebrew environment
            if [[ $(uname -m) == 'arm64' ]] && [ -f /opt/homebrew/bin/brew ]; then
                eval "$(/opt/homebrew/bin/brew shellenv)"
            elif [ -f /usr/local/bin/brew ]; then
                eval "$(/usr/local/bin/brew shellenv)"
            fi
            
            # Verify brew is available
            if command -v brew &> /dev/null; then
                break
            else
                print_warning "Homebrew installed but brew command not found, retrying..."
                continue
            fi
        else
            if [ $homebrew_attempts -lt $max_homebrew_attempts ]; then
                print_warning "Homebrew installation failed (attempt $homebrew_attempts/$max_homebrew_attempts)"
                print_info "Waiting 5 seconds before retry..."
                sleep 5
            else
                print_error "Homebrew installation failed after $max_homebrew_attempts attempts"
                print_error "This may be due to Xcode Command Line Tools still installing"
                print_info "Please wait for Xcode installation to complete and run the installer again"
                exit 1
            fi
        fi
    done
    
    # Install jq for manifest processing
    ensure_jq
}

# Load manifest and validate script dependencies
load_manifest() {
    local manifest_file="$1"
    
    if [ ! -f "$manifest_file" ]; then
        print_error "Manifest file not found: $manifest_file"
        exit 1
    fi
    
    # Validate JSON syntax
    if ! jq empty "$manifest_file" 2>/dev/null; then
        print_error "Invalid JSON in manifest file: $manifest_file"
        exit 1
    fi
    
    print_status "Loaded manifest: $(jq -r '.description' "$manifest_file")"
}

# Check if jq is available, install if needed
ensure_jq() {
    if ! command -v jq &> /dev/null; then
        print_info "Installing jq for manifest processing..."
        if command -v brew &> /dev/null; then
            brew install jq &> /dev/null || {
                print_error "Failed to install jq via Homebrew"
                exit 1
            }
        else
            print_error "jq is required but Homebrew is not available"
            print_error "Please install jq manually or ensure Homebrew is installed first"
            exit 1
        fi
        print_status "jq installed successfully"
    fi
}

# Save installation/update timestamp
save_timestamp() {
    mkdir -p "$CONFIG_DIR"
    date +%s > "$CONFIG_DIR/last_update"
    print_status "Saved update timestamp"
}

# Log update to history
log_update() {
    local update_type="$1"
    local scripts_run="$2"
    
    mkdir -p "$CONFIG_DIR"
    local history_file="$CONFIG_DIR/update_history.json"
    local timestamp=$(date +%s)
    
    # Create history file if it doesn't exist
    if [ ! -f "$history_file" ]; then
        echo "[]" > "$history_file"
    fi
    
    # Add new entry to history
    local new_entry=$(jq -n \
        --arg ts "$timestamp" \
        --arg ver "$VERSION" \
        --arg type "$update_type" \
        --arg scripts "$scripts_run" \
        '{timestamp: ($ts | tonumber), version: $ver, type: $type, scripts: $scripts}')
    
    jq ". += [$new_entry]" "$history_file" > "$history_file.tmp" && mv "$history_file.tmp" "$history_file"
}

# Run scripts based on manifest order
run_manifest_scripts() {
    local manifest_file="$1"
    local script_dir="$2"
    local script_count=0
    local executed_scripts=()
    
    # Get script names in order from manifest
    local script_names=($(jq -r '.scripts[].name' "$manifest_file"))
    echo "Starting to process ${#script_names[@]} scripts..." >&2
    
    for script_name in "${script_names[@]}"; do
        local script_path="$script_dir/$script_name"
        
        # Check if script exists
        if [ ! -f "$script_path" ]; then
            print_warning "Script not found: $script_name (skipping)"
            continue
        fi
        
        # Get script metadata from manifest
        local description=$(jq -r --arg name "$script_name" '.scripts[] | select(.name == $name) | .description' "$manifest_file")
        
        script_count=$((script_count + 1))
        
        # Show script info
        echo ""
        echo -e "\033[1mStep $script_count: $script_name\033[0m" >&2
        echo "Description: $description" >&2
        
        # Execute script with environment variable to suppress individual headers
        # Disable exit on error for individual script execution
        set +e
        OMAMACY_FROM_INSTALLER=1 bash "$script_path"
        local script_exit_code=$?
        set -e
        
        if [ $script_exit_code -eq 0 ]; then
            echo ""
            echo "‚úÖ Completed: $script_name" >&2
            executed_scripts+=("$script_name")
        else
            echo ""
            print_error "Failed: $script_name (exit code: $script_exit_code)"
            print_info "You can retry by running: bash $script_path"
            print_warning "Script failed, continuing with installation"
        fi
    done
    
    return $script_count
}

# Main execution
main() {
    print_header
    
    # Determine update type
    local update_type="install"
    if [ "$UPDATE_MODE" = true ]; then
        update_type="update"
        print_section "Running Omamacy Update"
    else
        print_section "Starting Omamacy Installation"
        
        # Only run preflight checks if not in update mode
        # Ensure Xcode CLI Tools are available before any git operations
        ensure_xcode_cli_tools
    fi
    
    # Check if we need to download the repository
    if ! check_repository_structure; then
        print_info "Repository structure not found, downloading..."
        download_repository
    fi
    
    # Get the directory where this script is located (should now be in $INSTALL_DIR)
    SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
    
    # Install core dependencies first (outside of manifest)
    if [ "$UPDATE_MODE" != true ]; then
        install_core_dependencies "$SCRIPT_DIR/scripts"
    else
        # In update mode, just ensure jq is available
        ensure_jq
    fi
    
    # Determine manifest file to use
    local manifest_file
    if [ -n "$CUSTOM_MANIFEST" ]; then
        # Use custom manifest (can be relative or absolute path)
        if [[ "$CUSTOM_MANIFEST" = /* ]]; then
            manifest_file="$CUSTOM_MANIFEST"
        else
            manifest_file="$SCRIPT_DIR/$CUSTOM_MANIFEST"
        fi
        print_info "Using custom manifest: $manifest_file"
    else
        manifest_file="$SCRIPT_DIR/scripts/manifest.json"
    fi
    
    # Load and validate manifest (jq is now available)
    load_manifest "$manifest_file"
    
    print_info "Running installation scripts from manifest..."
    
    # Run scripts based on manifest
    local script_count
    local executed_scripts
    script_count=$(run_manifest_scripts "$manifest_file" "$SCRIPT_DIR/scripts")
    
    if [ $script_count -eq 0 ]; then
        print_error "No installation scripts executed"
        exit 1
    fi
    
    # Save timestamp and log the update
    save_timestamp
    log_update "$update_type" "$script_count scripts"
    
    print_section "Installation Complete"
    print_status "Omamacy $update_type completed successfully!"
    print_info "Executed $script_count script(s)"
    
    if [ "$UPDATE_MODE" != true ]; then
        print_info "Restart your terminal or run 'source ~/.zshrc' to use new tools"
    fi
}

# Run main function
main