#!/bin/bash

# Omamacy - macOS Developer Environment Setup
# Usage: curl -fsSL https://peek-tech.github.io/devenv-setup/install | bash

# macOS only - exit immediately if not on macOS
if [[ "$OSTYPE" != "darwin"* ]]; then
    echo "❌ This installer is for macOS only. Detected: $OSTYPE"
    exit 1
fi

set -e

# Repository configuration
REPO_URL="https://github.com/peek-tech/devenv-setup.git"
INSTALL_DIR="$HOME/.omamacy"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
VERSION="2.0.0"

print_header() {
    echo ""
    echo -e "${CYAN}╔══════════════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║                    Omamacy v${VERSION}                    ║${NC}"
    echo -e "${CYAN}║              macOS Developer Environment                 ║${NC}"
    echo -e "${CYAN}╚══════════════════════════════════════════════════════════╝${NC}"
    echo ""
}

print_status() {
    echo -e "${GREEN}✅${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠️${NC} $1"
}

print_error() {
    echo -e "${RED}❌${NC} $1"
}

print_info() {
    echo -e "${BLUE}ℹ️${NC} $1"
}

print_section() {
    echo ""
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${CYAN}$1${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
}

# Ensure Xcode Command Line Tools are installed
ensure_xcode_cli_tools() {
    if ! xcode-select -p &> /dev/null; then
        print_info "Xcode Command Line Tools required for git operations"
        print_info "Installing Xcode Command Line Tools..."
        
        # Temporarily disable exit on error for this command
        set +e
        xcode-select --install 2>/dev/null
        local install_result=$?
        set -e
        
        # The command may fail if tools are already installed or if dialog was cancelled
        if [ $install_result -eq 0 ] || [ $install_result -eq 1 ]; then
            print_info "Please complete the Xcode CLI Tools installation in the popup window"
            print_info "Press any key after installation completes..."
            read -n 1 -s
        fi
        
        # Verify installation
        if ! xcode-select -p &> /dev/null; then
            print_error "Xcode Command Line Tools installation failed or incomplete"
            print_error "Please install manually: xcode-select --install"
            exit 1
        fi
    fi
    print_status "Xcode Command Line Tools available"
}

# Download repository if not already present
download_repository() {
    if [ -d "$INSTALL_DIR" ]; then
        print_info "Repository already exists at $INSTALL_DIR"
        cd "$INSTALL_DIR"
        git pull origin main 2>/dev/null || {
            print_warning "Could not update repository, continuing with existing version"
        }
    else
        print_info "Downloading Omamacy repository..."
        git clone "$REPO_URL" "$INSTALL_DIR" || {
            print_error "Failed to clone repository from $REPO_URL"
            exit 1
        }
        cd "$INSTALL_DIR"
    fi
}

# Check if we're running from downloaded repository
check_repository_structure() {
    local current_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
    
    # If scripts directory doesn't exist here, we need to download
    if [ ! -d "$current_dir/scripts" ]; then
        return 1
    fi
    
    # If we're not in the install directory, we need to download
    if [ "$current_dir" != "$INSTALL_DIR" ]; then
        return 1
    fi
    
    return 0
}

# Install core system dependencies (homebrew and jq)
install_core_dependencies() {
    local script_dir="$1"
    
    print_section "Installing Core Dependencies"
    
    # Install Homebrew
    if bash "$script_dir/homebrew.sh"; then
        print_status "Homebrew installation completed"
        
        # Load Homebrew environment
        if [[ $(uname -m) == 'arm64' ]] && [ -f /opt/homebrew/bin/brew ]; then
            eval "$(/opt/homebrew/bin/brew shellenv)"
        elif [ -f /usr/local/bin/brew ]; then
            eval "$(/usr/local/bin/brew shellenv)"
        fi
    else
        print_error "Homebrew installation failed"
        exit 1
    fi
    
    # Install jq for manifest processing
    ensure_jq
}

# Load manifest and validate script dependencies
load_manifest() {
    local manifest_file="$1"
    
    if [ ! -f "$manifest_file" ]; then
        print_error "Manifest file not found: $manifest_file"
        exit 1
    fi
    
    # Validate JSON syntax
    if ! jq empty "$manifest_file" 2>/dev/null; then
        print_error "Invalid JSON in manifest file: $manifest_file"
        exit 1
    fi
    
    print_status "Loaded manifest: $(jq -r '.description' "$manifest_file")"
}

# Check if jq is available, install if needed
ensure_jq() {
    if ! command -v jq &> /dev/null; then
        print_info "Installing jq for manifest processing..."
        if command -v brew &> /dev/null; then
            brew install jq &> /dev/null || {
                print_error "Failed to install jq via Homebrew"
                exit 1
            }
        else
            print_error "jq is required but Homebrew is not available"
            print_error "Please install jq manually or ensure Homebrew is installed first"
            exit 1
        fi
        print_status "jq installed successfully"
    fi
}

# Run scripts based on manifest order
run_manifest_scripts() {
    local manifest_file="$1"
    local script_dir="$2"
    local script_count=0
    local executed_scripts=()
    
    # Get script names in order from manifest
    local script_names=($(jq -r '.scripts[].name' "$manifest_file"))
    
    for script_name in "${script_names[@]}"; do
        local script_path="$script_dir/$script_name"
        
        # Check if script exists
        if [ ! -f "$script_path" ]; then
            print_warning "Script not found: $script_name (skipping)"
            continue
        fi
        
        # Get script metadata from manifest
        local description=$(jq -r --arg name "$script_name" '.scripts[] | select(.name == $name) | .description' "$manifest_file")
        local required=$(jq -r --arg name "$script_name" '.scripts[] | select(.name == $name) | .required' "$manifest_file")
        local optional=$(jq -r --arg name "$script_name" '.scripts[] | select(.name == $name) | .optional' "$manifest_file")
        
        script_count=$((script_count + 1))
        
        # Show script info
        echo ""
        print_section "Step $script_count: $script_name"
        print_info "Description: $description"
        echo ""
        
        # Handle optional scripts
        if [ "$optional" = "true" ]; then
            print_info "This is an optional configuration step"
            echo -n "Would you like to install $script_name? [y/N]: "
            read -r response
            if [[ ! "$response" =~ ^[Yy]$ ]]; then
                print_info "Skipping $script_name"
                continue
            fi
        fi
        
        # Execute script with environment variable to suppress individual headers
        if OMAMACY_FROM_INSTALLER=1 bash "$script_path"; then
            echo ""
            print_status "✅ Completed: $script_name"
            executed_scripts+=("$script_name")
            
        else
            print_error "Failed: $script_name"
            print_info "You can retry by running: bash $script_path"
            
            # Check if this was a required script
            if [ "$required" = "true" ]; then
                print_error "Required script failed, stopping installation"
                exit 1
            else
                print_warning "Optional script failed, continuing with installation"
            fi
        fi
    done
    
    return $script_count
}

# Main execution
main() {
    print_header
    
    print_section "Starting Omamacy Installation"
    
    # Ensure Xcode CLI Tools are available before any git operations
    ensure_xcode_cli_tools
    
    # Check if we need to download the repository
    if ! check_repository_structure; then
        print_info "Repository structure not found, downloading..."
        download_repository
    fi
    
    # Get the directory where this script is located (should now be in $INSTALL_DIR)
    SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
    
    # Install core dependencies first (outside of manifest)
    install_core_dependencies "$SCRIPT_DIR/scripts"
    
    # Load and validate manifest (jq is now available)
    local manifest_file="$SCRIPT_DIR/scripts/manifest.json"
    load_manifest "$manifest_file"
    
    print_info "Running installation scripts from manifest..."
    
    # Force output flush and test print functions
    echo "TEST: This should appear before scripts start" >&2
    sync
    
    # Run scripts based on manifest
    local script_count
    script_count=$(run_manifest_scripts "$manifest_file" "$SCRIPT_DIR/scripts")
    
    if [ $script_count -eq 0 ]; then
        print_error "No installation scripts executed"
        exit 1
    fi
    
    print_section "Installation Complete"
    print_status "Omamacy installation completed successfully!"
    print_info "Executed $script_count script(s)"
    print_info "Restart your terminal or run 'source ~/.zshrc' to use new tools"
}

# Run main function
main "$@"