#!/bin/bash

# Omacy - macOS Developer Environment Setup
# Usage: curl -fsSL https://peek-tech.github.io/devenv-setup/install | bash

# macOS only - exit immediately if not on macOS
if [[ "$OSTYPE" != "darwin"* ]]; then
    echo "❌ This installer is for macOS only. Detected: $OSTYPE"
    exit 1
fi

set -e

# Repository configuration
REPO_URL="https://github.com/peek-tech/devenv-setup.git"
INSTALL_DIR="$HOME/.omacy"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
VERSION="2.0.0"

print_header() {
    echo ""
    echo -e "${CYAN}╔══════════════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║                     Omacy v${VERSION}                     ║${NC}"
    echo -e "${CYAN}║              macOS Developer Environment                 ║${NC}"
    echo -e "${CYAN}╚══════════════════════════════════════════════════════════╝${NC}"
    echo ""
}

print_status() {
    echo -e "${GREEN}✅${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠️${NC} $1"
}

print_error() {
    echo -e "${RED}❌${NC} $1"
}

print_info() {
    echo -e "${BLUE}ℹ️${NC} $1"
}

print_section() {
    echo ""
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${CYAN}$1${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
}

# Ensure Xcode Command Line Tools are installed
ensure_xcode_cli_tools() {
    if ! xcode-select -p &> /dev/null; then
        print_info "Xcode Command Line Tools required for git operations"
        print_info "Installing Xcode Command Line Tools..."
        xcode-select --install
        print_info "Please complete the Xcode CLI Tools installation in the popup window"
        print_info "Press any key after installation completes..."
        read -n 1 -s
        
        # Verify installation
        if ! xcode-select -p &> /dev/null; then
            print_error "Xcode Command Line Tools installation failed or incomplete"
            exit 1
        fi
    fi
    print_status "Xcode Command Line Tools available"
}

# Download repository if not already present
download_repository() {
    if [ -d "$INSTALL_DIR" ]; then
        print_info "Repository already exists at $INSTALL_DIR"
        cd "$INSTALL_DIR"
        git pull origin main 2>/dev/null || {
            print_warning "Could not update repository, continuing with existing version"
        }
    else
        print_info "Downloading Omacy repository..."
        git clone "$REPO_URL" "$INSTALL_DIR" || {
            print_error "Failed to clone repository from $REPO_URL"
            exit 1
        }
        cd "$INSTALL_DIR"
    fi
}

# Check if we're running from downloaded repository
check_repository_structure() {
    local current_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
    
    # If scripts directory doesn't exist here, we need to download
    if [ ! -d "$current_dir/scripts" ]; then
        return 1
    fi
    
    # If we're not in the install directory, we need to download
    if [ "$current_dir" != "$INSTALL_DIR" ]; then
        return 1
    fi
    
    return 0
}

# Main execution
main() {
    print_header
    
    print_section "Starting Omacy Installation"
    
    # Ensure Xcode CLI Tools are available before any git operations
    ensure_xcode_cli_tools
    
    # Check if we need to download the repository
    if ! check_repository_structure; then
        print_info "Repository structure not found, downloading..."
        download_repository
    fi
    
    # Get the directory where this script is located (should now be in $INSTALL_DIR)
    SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
    
    print_info "Running modular installation scripts..."
    
    # Run all numbered scripts in order
    local script_count=0
    for script in "$SCRIPT_DIR/scripts"/[0-9]*.sh; do
        if [ -f "$script" ]; then
            script_count=$((script_count + 1))
            local script_name=$(basename "$script")
            print_section "Step $script_count: $script_name"
            
            if bash "$script"; then
                print_status "Completed: $script_name"
            else
                print_error "Failed: $script_name"
                print_info "You can retry by running: bash $script"
                exit 1
            fi
        fi
    done
    
    if [ $script_count -eq 0 ]; then
        print_error "No installation scripts found in $SCRIPT_DIR/scripts/"
        exit 1
    fi
    
    print_section "Installation Complete"
    print_status "Omacy installation completed successfully!"
    print_info "Installed $script_count components"
    print_info "Restart your terminal or run 'source ~/.zshrc' to use new tools"
}

# Run main function
main "$@"