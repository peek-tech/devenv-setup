#!/bin/bash

# Omamacy - Theme Management CLI
# Usage: omamacy theme <command>

VERSION="2.0.0"
OMAMACY_CONFIG_DIR="$HOME/.config/omamacy"
THEMES_DIR="$OMAMACY_CONFIG_DIR/themes"
CURRENT_THEME_FILE="$OMAMACY_CONFIG_DIR/current-theme"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

print_header() {
    echo ""
    echo -e "${CYAN}╔══════════════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║                    Omamacy v${VERSION}                    ║${NC}"
    echo -e "${CYAN}║              macOS Developer Environment                 ║${NC}"
    echo -e "${CYAN}╚══════════════════════════════════════════════════════════╝${NC}"
    echo ""
}

print_status() {
    echo -e "${GREEN}✅${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠️${NC} $1"
}

print_error() {
    echo -e "${RED}❌${NC} $1"
}

print_info() {
    echo -e "${BLUE}ℹ️${NC} $1"
}

# Get current theme
get_current_theme() {
    if [ -f "$CURRENT_THEME_FILE" ]; then
        cat "$CURRENT_THEME_FILE"
    else
        echo "catppuccin-mocha"  # Default theme
    fi
}

# Set current theme
set_current_theme() {
    local theme="$1"
    echo "$theme" > "$CURRENT_THEME_FILE"
}

# List available themes
list_themes() {
    print_info "Available themes:"
    echo ""
    
    local current_theme="$(get_current_theme)"
    
    if [ -d "$THEMES_DIR" ]; then
        for theme_dir in "$THEMES_DIR"/*; do
            if [ -d "$theme_dir" ]; then
                local theme_name="$(basename "$theme_dir")"
                local theme_type="dark"
                
                # Check if it's a light theme
                if [ -f "$theme_dir/light.mode" ]; then
                    theme_type="light"
                fi
                
                # Mark current theme
                if [ "$theme_name" = "$current_theme" ]; then
                    echo -e "  ${GREEN}●${NC} $theme_name ($theme_type) ${CYAN}[current]${NC}"
                else
                    echo -e "  ○ $theme_name ($theme_type)"
                fi
            fi
        done
    else
        print_warning "No themes directory found. Run the installer first."
    fi
    echo ""
}

# Apply theme to applications
apply_theme() {
    local theme="$1"
    local theme_dir="$THEMES_DIR/$theme"
    
    if [ ! -d "$theme_dir" ]; then
        print_error "Theme '$theme' not found"
        return 1
    fi
    
    print_info "Applying theme: $theme"
    
    # Apply Ghostty theme
    if [ -f "$theme_dir/ghostty.conf" ]; then
        local ghostty_config="$HOME/.config/ghostty/config"
        if [ -f "$ghostty_config" ]; then
            cp "$theme_dir/ghostty.conf" "$ghostty_config"
            print_status "Ghostty theme applied"
        fi
    fi
    
    # Apply VSCode theme
    if [ -f "$theme_dir/vscode.json" ] && command -v code &> /dev/null; then
        local vscode_settings="$HOME/Library/Application Support/Code/User/settings.json"
        if [ -f "$vscode_settings" ]; then
            # Merge theme settings with existing VSCode settings
            # This is a simplified approach - in practice, you'd want proper JSON merging
            print_info "VSCode theme configuration available in: $theme_dir/vscode.json"
            print_info "Manually merge with your settings.json or use the VSCode Catppuccin extension"
        fi
    fi
    
    # Apply terminal theme configurations
    if [ -f "$theme_dir/fzf.conf" ]; then
        local shell_config="$(get_shell_config_file)"
        if ! grep -q "# Omamacy FZF Theme" "$shell_config" 2>/dev/null; then
            echo "" >> "$shell_config"
            echo "# Omamacy FZF Theme" >> "$shell_config"
            cat "$theme_dir/fzf.conf" >> "$shell_config"
            print_status "FZF theme applied to shell config"
        fi
    fi
    
    # Apply bat theme
    if [ -f "$theme_dir/bat.conf" ]; then
        local bat_config="$HOME/.config/bat/config"
        mkdir -p "$(dirname "$bat_config")"
        cp "$theme_dir/bat.conf" "$bat_config"
        print_status "Bat theme applied"
    fi
    
    # Apply git delta theme
    if [ -f "$theme_dir/delta.conf" ]; then
        # Add delta configuration to gitconfig
        git config --global include.path "$theme_dir/delta.conf"
        print_status "Git Delta theme applied"
    fi
    
    # Set as current theme
    set_current_theme "$theme"
    
    print_status "Theme '$theme' applied successfully!"
    print_info "You may need to restart applications to see changes"
}

# Get shell config file
get_shell_config_file() {
    local user_shell="$(basename "$SHELL")"
    case "$user_shell" in
        bash)
            if [[ "$OSTYPE" == "darwin"* ]]; then
                echo "$HOME/.bash_profile"
            else
                echo "$HOME/.bashrc"
            fi
            ;;
        zsh)
            echo "$HOME/.zshrc"
            ;;
        fish)
            echo "$HOME/.config/fish/config.fish"
            ;;
        *)
            echo "$HOME/.profile"
            ;;
    esac
}

# Show current theme
show_current_theme() {
    local current_theme="$(get_current_theme)"
    local theme_dir="$THEMES_DIR/$current_theme"
    
    print_info "Current theme: $current_theme"
    
    if [ -f "$theme_dir/colors.json" ]; then
        echo ""
        print_info "Theme details:"
        if command -v jq &> /dev/null; then
            jq -r '.name + " (" + .type + ")"' "$theme_dir/colors.json"
        else
            echo "  Install 'jq' to see theme details"
        fi
    fi
}

# Show help
show_help() {
    print_header
    echo "Usage: omamacy theme <command>"
    echo ""
    echo "Commands:"
    echo "  list                List available themes"
    echo "  current            Show current theme"
    echo "  set <theme>        Switch to specified theme"
    echo "  help               Show this help message"
    echo ""
    echo "Examples:"
    echo "  omamacy theme list"
    echo "  omamacy theme set catppuccin-latte"
    echo "  omamacy theme current"
    echo ""
}

# Main command dispatcher
main() {
    # Create config directory if it doesn't exist
    mkdir -p "$OMAMACY_CONFIG_DIR"
    
    case "${1:-}" in
        "theme")
            case "${2:-}" in
                "list")
                    list_themes
                    ;;
                "current")
                    show_current_theme
                    ;;
                "set")
                    if [ -n "${3:-}" ]; then
                        apply_theme "$3"
                    else
                        print_error "Please specify a theme name"
                        echo "Usage: omamacy theme set <theme-name>"
                        echo "Run 'omamacy theme list' to see available themes"
                    fi
                    ;;
                "help"|*)
                    show_help
                    ;;
            esac
            ;;
        "help"|"--help"|"-h"|*)
            show_help
            ;;
    esac
}

# Run main function
main "$@"