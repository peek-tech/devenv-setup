#!/bin/bash

# Omamacy - Theme Management CLI
# Usage: omamacy theme <command>

VERSION="2.0.0"
OMAMACY_CONFIG_DIR="$HOME/.config/omamacy"
THEMES_DIR="$OMAMACY_CONFIG_DIR/themes"
CURRENT_THEME_FILE="$OMAMACY_CONFIG_DIR/current-theme"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

print_header() {
    echo ""
    echo -e "${CYAN}╔══════════════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║                    Omamacy v${VERSION}                    ║${NC}"
    echo -e "${CYAN}║              macOS Developer Environment                 ║${NC}"
    echo -e "${CYAN}╚══════════════════════════════════════════════════════════╝${NC}"
    echo ""
}

print_status() {
    echo -e "${GREEN}✅${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠️${NC} $1"
}

print_error() {
    echo -e "${RED}❌${NC} $1"
}

print_info() {
    echo -e "${BLUE}ℹ️${NC} $1"
}

# Get current theme
get_current_theme() {
    if [ -f "$CURRENT_THEME_FILE" ]; then
        cat "$CURRENT_THEME_FILE"
    else
        echo "catppuccin-mocha"  # Default theme
    fi
}

# Set current theme
set_current_theme() {
    local theme="$1"
    echo "$theme" > "$CURRENT_THEME_FILE"
}

# List available themes
list_themes() {
    print_info "Available themes:"
    echo ""
    
    local current_theme="$(get_current_theme)"
    
    if [ -d "$THEMES_DIR" ]; then
        for theme_dir in "$THEMES_DIR"/*; do
            if [ -d "$theme_dir" ]; then
                local theme_name="$(basename "$theme_dir")"
                local theme_type="dark"
                
                # Check if it's a light theme
                if [ -f "$theme_dir/light.mode" ]; then
                    theme_type="light"
                fi
                
                # Mark current theme
                if [ "$theme_name" = "$current_theme" ]; then
                    echo -e "  ${GREEN}●${NC} $theme_name ($theme_type) ${CYAN}[current]${NC}"
                else
                    echo -e "  ○ $theme_name ($theme_type)"
                fi
            fi
        done
    else
        print_warning "No themes directory found. Run the installer first."
    fi
    echo ""
}

# Apply theme to applications using delegation pattern
apply_theme() {
    local theme="$1"
    local theme_dir="$THEMES_DIR/$theme"
    
    if [ ! -d "$theme_dir" ]; then
        print_error "Theme '$theme' not found"
        return 1
    fi
    
    print_info "Applying theme: $theme"
    
    # Find the scripts directory (assuming omamacy is in /usr/local/bin and scripts are relative)
    local scripts_base_dir
    if [ -d "/Users/$(whoami)/.claude/devenv-setup/scripts" ]; then
        scripts_base_dir="/Users/$(whoami)/.claude/devenv-setup/scripts"
    else
        print_error "Could not find scripts directory"
        return 1
    fi
    
    # List of themed applications and their script paths
    local themed_apps=(
        "apps/ghostty.sh"
        "apps/vscode-config.sh"
        "apps/tmux.sh"
        "tools/bat.sh"
        "tools/starship.sh"
        "tools/fzf.sh"
        "tools/delta.sh"
    )
    
    local success_count=0
    local total_count=0
    
    # Apply theme via individual scripts
    for app_script in "${themed_apps[@]}"; do
        local script_path="$scripts_base_dir/$app_script"
        local app_name=$(basename "$app_script" .sh)
        total_count=$((total_count + 1))
        
        if [ -f "$script_path" ]; then
            print_info "Applying $theme theme to $app_name..."
            # Set environment variable and call script
            if OMAMACY_APPLY_THEME_ONLY="$theme" "$script_path" 2>/dev/null; then
                print_status "$app_name theme applied via delegation"
                success_count=$((success_count + 1))
            else
                print_warning "Failed to apply theme to $app_name (may not be installed)"
            fi
        else
            print_warning "Script not found: $script_path"
        fi
    done
    
    # Set as current theme
    set_current_theme "$theme"
    
    print_status "Theme '$theme' applied successfully!"
    print_info "Applied to $success_count out of $total_count applications"
    print_info "You may need to restart applications to see changes"
}

# Get shell config file
get_shell_config_file() {
    local user_shell="$(basename "$SHELL")"
    case "$user_shell" in
        bash)
            if [[ "$OSTYPE" == "darwin"* ]]; then
                echo "$HOME/.bash_profile"
            else
                echo "$HOME/.bashrc"
            fi
            ;;
        zsh)
            echo "$HOME/.zshrc"
            ;;
        fish)
            echo "$HOME/.config/fish/config.fish"
            ;;
        *)
            echo "$HOME/.profile"
            ;;
    esac
}

# Show current theme
show_current_theme() {
    local current_theme="$(get_current_theme)"
    local theme_dir="$THEMES_DIR/$current_theme"
    
    print_info "Current theme: $current_theme"
    
    if [ -f "$theme_dir/colors.json" ]; then
        echo ""
        print_info "Theme details:"
        if command -v jq &> /dev/null; then
            jq -r '.name + " (" + .type + ")"' "$theme_dir/colors.json"
        else
            echo "  Install 'jq' to see theme details"
        fi
    fi
}

# List available fonts by opening Font Book
list_fonts() {
    print_info "Opening macOS Font Book to browse available fonts..."
    print_info "Popular developer fonts to consider:"
    print_info "  - FiraCode Nerd Font (default)"
    print_info "  - JetBrains Mono Nerd Font"
    print_info "  - SF Mono"
    print_info "  - Monaco"
    print_info "  - Menlo"
    print_info "  - Cascadia Code"
    print_info "  - Fira Code"
    print_info ""
    print_info "Opening Font Book..."
    
    # Open Font Book application
    open -a "Font Book" 2>/dev/null || {
        print_error "Could not open Font Book"
        print_info "You can also open it manually from Applications > Font Book"
        return 1
    }
    
    print_status "Font Book opened successfully"
    print_info "Copy the exact font name from Font Book to use with:"
    print_info "  omamacy font set \"<Font Name>\""
}

# Apply font to applications using delegation pattern
apply_font() {
    local font="$1"
    
    if [ -z "$font" ]; then
        print_error "Font name cannot be empty"
        return 1
    fi
    
    print_info "Applying font: $font"
    
    # Find the scripts directory
    local scripts_base_dir
    if [ -d "/Users/$(whoami)/.claude/devenv-setup/scripts" ]; then
        scripts_base_dir="/Users/$(whoami)/.claude/devenv-setup/scripts"
    else
        print_error "Could not find scripts directory"
        return 1
    fi
    
    # List of applications that support font configuration
    local font_apps=(
        "apps/ghostty.sh"
        "apps/vscode-config.sh"
    )
    
    local success_count=0
    local total_count=0
    
    # Apply font via individual scripts
    for app_script in "${font_apps[@]}"; do
        local script_path="$scripts_base_dir/$app_script"
        local app_name=$(basename "$app_script" .sh)
        total_count=$((total_count + 1))
        
        if [ -f "$script_path" ]; then
            print_info "Applying font '$font' to $app_name..."
            # Set environment variable and call script
            if OMAMACY_APPLY_FONT_ONLY="$font" "$script_path" 2>/dev/null; then
                print_status "$app_name font applied via delegation"
                success_count=$((success_count + 1))
            else
                print_warning "Failed to apply font to $app_name (may not be installed)"
            fi
        else
            print_warning "Script not found: $script_path"
        fi
    done
    
    print_status "Font '$font' applied successfully!"
    print_info "Applied to $success_count out of $total_count applications"
    print_info "You may need to restart applications to see changes"
}

# Show help
show_help() {
    print_header
    echo "Usage: omamacy <command> [options]"
    echo ""
    echo "Theme Commands:"
    echo "  theme list         List available themes"
    echo "  theme current      Show current theme"
    echo "  theme set <theme>  Switch to specified theme"
    echo ""
    echo "Font Commands:"
    echo "  font list          Open Font Book to browse available fonts"
    echo "  font set <font>    Set font for supported applications"
    echo ""
    echo "General Commands:"
    echo "  help               Show this help message"
    echo ""
    echo "Examples:"
    echo "  omamacy theme list"
    echo "  omamacy theme set catppuccin-latte"
    echo "  omamacy font set \"FiraCode Nerd Font\""
    echo "  omamacy font set \"JetBrains Mono Nerd Font\""
    echo ""
}

# Main command dispatcher
main() {
    # Create config directory if it doesn't exist
    mkdir -p "$OMAMACY_CONFIG_DIR"
    
    case "${1:-}" in
        "theme")
            case "${2:-}" in
                "list")
                    list_themes
                    ;;
                "current")
                    show_current_theme
                    ;;
                "set")
                    if [ -n "${3:-}" ]; then
                        apply_theme "$3"
                    else
                        print_error "Please specify a theme name"
                        echo "Usage: omamacy theme set <theme-name>"
                        echo "Run 'omamacy theme list' to see available themes"
                    fi
                    ;;
                "help"|*)
                    show_help
                    ;;
            esac
            ;;
        "font")
            case "${2:-}" in
                "list")
                    list_fonts
                    ;;
                "set")
                    if [ -n "${3:-}" ]; then
                        apply_font "$3"
                    else
                        print_error "Please specify a font name"
                        echo "Usage: omamacy font set <font-name>"
                        echo "Example: omamacy font set \"JetBrains Mono Nerd Font\""
                        echo "Run 'omamacy font list' to browse available fonts"
                    fi
                    ;;
                "help"|*)
                    show_help
                    ;;
            esac
            ;;
        "help"|"--help"|"-h"|*)
            show_help
            ;;
    esac
}

# Run main function
main "$@"