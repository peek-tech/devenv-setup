#!/bin/bash

# Omamacy - Ghostty Terminal Installation
# Modern terminal emulator with optimal configuration

# Load common functions
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/../lib/common.sh"

# Apply theme to existing Ghostty configuration
apply_ghostty_theme() {
    local theme_name="$1"
    local config_dir="$HOME/.config/ghostty"
    local config_file="$config_dir/config"
    local themes_dir="$HOME/.config/omamacy/themes"
    local theme_file="$themes_dir/$theme_name/ghostty.conf"
    
    if [ ! -f "$config_file" ]; then
        print_error "Ghostty config not found at $config_file"
        return 1
    fi
    
    if [ ! -f "$theme_file" ]; then
        print_error "Theme file not found: $theme_file"
        return 1
    fi
    
    print_info "Applying $theme_name theme to Ghostty..."
    
    # Create a temporary file to work with
    local temp_file=$(mktemp)
    cp "$config_file" "$temp_file"
    
    # Extract theme-specific settings from theme file
    # These are the color/theme settings that should be replaced
    local theme_settings=(
        "background"
        "foreground" 
        "palette"
        "cursor-color"
        "cursor-text"
        "selection-background"
        "selection-foreground"
        "window-theme"
    )
    
    # Remove existing theme settings from config
    for setting in "${theme_settings[@]}"; do
        if [ "$setting" = "palette" ]; then
            # Remove all palette entries
            sed -i '' '/^palette = /d' "$temp_file"
        else
            # Remove specific setting
            sed -i '' "/^$setting = /d" "$temp_file"
        fi
    done
    
    # Find where to insert theme settings (after font configuration)
    local insert_line=$(grep -n "font-size = " "$temp_file" | cut -d: -f1)
    if [ -z "$insert_line" ]; then
        # Fallback: insert after first comment block
        insert_line=$(grep -n "^$" "$temp_file" | head -1 | cut -d: -f1)
    fi
    
    if [ -n "$insert_line" ]; then
        # Extract theme settings from theme file
        local theme_content=$(mktemp)
        echo "" >> "$theme_content"
        echo "# Theme: $theme_name" >> "$theme_content"
        grep -E "^(background|foreground|palette|cursor-color|cursor-text|selection-background|selection-foreground|window-theme)" "$theme_file" >> "$theme_content"
        
        # Insert theme settings after the identified line
        {
            head -n "$insert_line" "$temp_file"
            cat "$theme_content"
            tail -n +"$((insert_line + 1))" "$temp_file"
        } > "$config_file"
        
        rm "$theme_content"
    else
        print_warning "Could not find appropriate location to insert theme settings"
        return 1
    fi
    
    rm "$temp_file"
    print_status "Ghostty theme applied: $theme_name"
}

# Apply font to existing Ghostty configuration  
apply_ghostty_font() {
    local font_name="$1"
    local config_dir="$HOME/.config/ghostty"
    local config_file="$config_dir/config"
    
    if [ ! -f "$config_file" ]; then
        print_error "Ghostty config not found at $config_file"
        return 1
    fi
    
    print_info "Applying font '$font_name' to Ghostty..."
    
    # Update font-family setting, preserving other settings
    sed -i '' "s|^font-family = .*|font-family = \"$font_name\"|" "$config_file"
    
    print_status "Ghostty font applied: $font_name"
}

# Configure Ghostty terminal
configure_ghostty() {
    print_info "Configuring Ghostty terminal..."
    
    local config_dir="$HOME/.config/ghostty"
    local config_file="$config_dir/config"
    
    # Create config directory
    mkdir -p "$config_dir"
    
    # Backup existing config if it exists
    if [ -f "$config_file" ]; then
        cp "$config_file" "$config_file.backup.$(date +%Y%m%d_%H%M%S)"
        print_info "Existing Ghostty config backed up"
    fi
    
    # Create Ghostty configuration (without theme-specific settings)
    cat > "$config_file" << 'EOF'
# Ghostty Terminal Configuration
# Generated by Omamacy

# Font configuration
font-family = "JetBrains Mono Nerd Font"
font-size = 14

# Window configuration
window-decoration = true
window-padding-x = 10
window-padding-y = 10

# Cursor
cursor-style = "block"
cursor-style-blink = false

# Shell integration
shell-integration = "detect"

# Performance
copy-on-select = true
confirm-close-surface = false

# Key bindings
keybind = cmd+t=new_tab
keybind = cmd+w=close_surface
keybind = cmd+n=new_window
keybind = cmd+shift+t=restore_tab
keybind = cmd+plus=increase_font_size
keybind = cmd+minus=decrease_font_size
keybind = cmd+0=reset_font_size
EOF
    
    print_status "Ghostty configuration created at $config_file"
    print_info "Features configured:"
    print_info "  JetBrains Mono Nerd Font (theme will be applied separately)"
    print_info "  Optimized key bindings and shell integration"
    print_info "  Performance optimizations enabled"
}

# Main installation
main() {
    # Check for theme-only mode
    if [ -n "$OMAMACY_APPLY_THEME_ONLY" ]; then
        apply_ghostty_theme "$OMAMACY_APPLY_THEME_ONLY"
        return $?
    fi
    
    # Check for font-only mode
    if [ -n "$OMAMACY_APPLY_FONT_ONLY" ]; then
        apply_ghostty_font "$OMAMACY_APPLY_FONT_ONLY"
        return $?
    fi
    
    # Normal installation mode
    run_individual_script "ghostty.sh" "Ghostty (Modern Terminal)"
    
    # Install Ghostty via Homebrew
    if ! install_brew_package "ghostty" true "Modern terminal emulator"; then
        script_failure "ghostty" "Failed to install via Homebrew"
    fi
    
    # Configure Ghostty
    configure_ghostty
    
    script_success "ghostty"
}

# Only run main if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi